'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.42000
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.ComponentModel
Imports System.Data
Imports System.Diagnostics
Imports System.Web.Services
Imports System.Web.Services.Protocols
Imports System.Xml.Serialization

'
'This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
'
Namespace TML_Service
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Web.Services.WebServiceBindingAttribute(Name:="Service1Soap", [Namespace]:="http://yokogawa.com.bh/")>  _
    Partial Public Class Service1
        Inherits System.Web.Services.Protocols.SoapHttpClientProtocol
        
        Private getIndexModelCodeOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getModelOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getProductDescriptionOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getProductStyleOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getIndexItemDetailsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getIndexItemDetailsStringOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getIndexItemDetailsString_PlateMarkingOnlyOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getIndexItemDetOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CYBERPS_SPOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getPlatePartNumbersOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ReadDBasStringOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ExecureSqlQryOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateYGSPSoLineOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ReadYGSPSoLineOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UploadFile_ScanDeliveryNoteOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UploadFile_FinalQCCOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getCrmDatatableOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ConvertExcelToPDFOperationCompleted As System.Threading.SendOrPostCallback
        
        Private useDefaultCredentialsSetExplicitly As Boolean
        
        '''<remarks/>
        Public Sub New()
            MyBase.New
            Me.Url = Global.QualityControlCheckAppliation.My.MySettings.Default.QualityControlCheckAppliation_TML_Service_Service1
            If (Me.IsLocalFileSystemWebService(Me.Url) = true) Then
                Me.UseDefaultCredentials = true
                Me.useDefaultCredentialsSetExplicitly = false
            Else
                Me.useDefaultCredentialsSetExplicitly = true
            End If
        End Sub
        
        Public Shadows Property Url() As String
            Get
                Return MyBase.Url
            End Get
            Set
                If (((Me.IsLocalFileSystemWebService(MyBase.Url) = true)  _
                            AndAlso (Me.useDefaultCredentialsSetExplicitly = false))  _
                            AndAlso (Me.IsLocalFileSystemWebService(value) = false)) Then
                    MyBase.UseDefaultCredentials = false
                End If
                MyBase.Url = value
            End Set
        End Property
        
        Public Shadows Property UseDefaultCredentials() As Boolean
            Get
                Return MyBase.UseDefaultCredentials
            End Get
            Set
                MyBase.UseDefaultCredentials = value
                Me.useDefaultCredentialsSetExplicitly = true
            End Set
        End Property
        
        '''<remarks/>
        Public Event getIndexModelCodeCompleted As getIndexModelCodeCompletedEventHandler
        
        '''<remarks/>
        Public Event getModelCompleted As getModelCompletedEventHandler
        
        '''<remarks/>
        Public Event getProductDescriptionCompleted As getProductDescriptionCompletedEventHandler
        
        '''<remarks/>
        Public Event getProductStyleCompleted As getProductStyleCompletedEventHandler
        
        '''<remarks/>
        Public Event getIndexItemDetailsCompleted As getIndexItemDetailsCompletedEventHandler
        
        '''<remarks/>
        Public Event getIndexItemDetailsStringCompleted As getIndexItemDetailsStringCompletedEventHandler
        
        '''<remarks/>
        Public Event getIndexItemDetailsString_PlateMarkingOnlyCompleted As getIndexItemDetailsString_PlateMarkingOnlyCompletedEventHandler
        
        '''<remarks/>
        Public Event getIndexItemDetCompleted As getIndexItemDetCompletedEventHandler
        
        '''<remarks/>
        Public Event CYBERPS_SPCompleted As CYBERPS_SPCompletedEventHandler
        
        '''<remarks/>
        Public Event getPlatePartNumbersCompleted As getPlatePartNumbersCompletedEventHandler
        
        '''<remarks/>
        Public Event ReadDBasStringCompleted As ReadDBasStringCompletedEventHandler
        
        '''<remarks/>
        Public Event ExecureSqlQryCompleted As ExecureSqlQryCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateYGSPSoLineCompleted As UpdateYGSPSoLineCompletedEventHandler
        
        '''<remarks/>
        Public Event ReadYGSPSoLineCompleted As ReadYGSPSoLineCompletedEventHandler
        
        '''<remarks/>
        Public Event UploadFile_ScanDeliveryNoteCompleted As UploadFile_ScanDeliveryNoteCompletedEventHandler
        
        '''<remarks/>
        Public Event UploadFile_FinalQCCCompleted As UploadFile_FinalQCCCompletedEventHandler
        
        '''<remarks/>
        Public Event getCrmDatatableCompleted As getCrmDatatableCompletedEventHandler
        
        '''<remarks/>
        Public Event ConvertExcelToPDFCompleted As ConvertExcelToPDFCompletedEventHandler
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://yokogawa.com.bh/getIndexModelCode", RequestNamespace:="http://yokogawa.com.bh/", ResponseNamespace:="http://yokogawa.com.bh/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getIndexModelCode(ByVal IndexNo As String) As String
            Dim results() As Object = Me.Invoke("getIndexModelCode", New Object() {IndexNo})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getIndexModelCodeAsync(ByVal IndexNo As String)
            Me.getIndexModelCodeAsync(IndexNo, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getIndexModelCodeAsync(ByVal IndexNo As String, ByVal userState As Object)
            If (Me.getIndexModelCodeOperationCompleted Is Nothing) Then
                Me.getIndexModelCodeOperationCompleted = AddressOf Me.OngetIndexModelCodeOperationCompleted
            End If
            Me.InvokeAsync("getIndexModelCode", New Object() {IndexNo}, Me.getIndexModelCodeOperationCompleted, userState)
        End Sub
        
        Private Sub OngetIndexModelCodeOperationCompleted(ByVal arg As Object)
            If (Not (Me.getIndexModelCodeCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getIndexModelCodeCompleted(Me, New getIndexModelCodeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://yokogawa.com.bh/getModel", RequestNamespace:="http://yokogawa.com.bh/", ResponseNamespace:="http://yokogawa.com.bh/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getModel(ByVal ModelCodeFull As String) As String
            Dim results() As Object = Me.Invoke("getModel", New Object() {ModelCodeFull})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getModelAsync(ByVal ModelCodeFull As String)
            Me.getModelAsync(ModelCodeFull, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getModelAsync(ByVal ModelCodeFull As String, ByVal userState As Object)
            If (Me.getModelOperationCompleted Is Nothing) Then
                Me.getModelOperationCompleted = AddressOf Me.OngetModelOperationCompleted
            End If
            Me.InvokeAsync("getModel", New Object() {ModelCodeFull}, Me.getModelOperationCompleted, userState)
        End Sub
        
        Private Sub OngetModelOperationCompleted(ByVal arg As Object)
            If (Not (Me.getModelCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getModelCompleted(Me, New getModelCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://yokogawa.com.bh/getProductDescription", RequestNamespace:="http://yokogawa.com.bh/", ResponseNamespace:="http://yokogawa.com.bh/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getProductDescription(ByVal model As String) As String
            Dim results() As Object = Me.Invoke("getProductDescription", New Object() {model})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getProductDescriptionAsync(ByVal model As String)
            Me.getProductDescriptionAsync(model, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getProductDescriptionAsync(ByVal model As String, ByVal userState As Object)
            If (Me.getProductDescriptionOperationCompleted Is Nothing) Then
                Me.getProductDescriptionOperationCompleted = AddressOf Me.OngetProductDescriptionOperationCompleted
            End If
            Me.InvokeAsync("getProductDescription", New Object() {model}, Me.getProductDescriptionOperationCompleted, userState)
        End Sub
        
        Private Sub OngetProductDescriptionOperationCompleted(ByVal arg As Object)
            If (Not (Me.getProductDescriptionCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getProductDescriptionCompleted(Me, New getProductDescriptionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://yokogawa.com.bh/getProductStyle", RequestNamespace:="http://yokogawa.com.bh/", ResponseNamespace:="http://yokogawa.com.bh/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getProductStyle(ByVal model As String) As String
            Dim results() As Object = Me.Invoke("getProductStyle", New Object() {model})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getProductStyleAsync(ByVal model As String)
            Me.getProductStyleAsync(model, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getProductStyleAsync(ByVal model As String, ByVal userState As Object)
            If (Me.getProductStyleOperationCompleted Is Nothing) Then
                Me.getProductStyleOperationCompleted = AddressOf Me.OngetProductStyleOperationCompleted
            End If
            Me.InvokeAsync("getProductStyle", New Object() {model}, Me.getProductStyleOperationCompleted, userState)
        End Sub
        
        Private Sub OngetProductStyleOperationCompleted(ByVal arg As Object)
            If (Not (Me.getProductStyleCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getProductStyleCompleted(Me, New getProductStyleCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://yokogawa.com.bh/getIndexItemDetails", RequestNamespace:="http://yokogawa.com.bh/", ResponseNamespace:="http://yokogawa.com.bh/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getIndexItemDetails(ByVal IndexNo As String) As String()
            Dim results() As Object = Me.Invoke("getIndexItemDetails", New Object() {IndexNo})
            Return CType(results(0),String())
        End Function
        
        '''<remarks/>
        Public Overloads Sub getIndexItemDetailsAsync(ByVal IndexNo As String)
            Me.getIndexItemDetailsAsync(IndexNo, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getIndexItemDetailsAsync(ByVal IndexNo As String, ByVal userState As Object)
            If (Me.getIndexItemDetailsOperationCompleted Is Nothing) Then
                Me.getIndexItemDetailsOperationCompleted = AddressOf Me.OngetIndexItemDetailsOperationCompleted
            End If
            Me.InvokeAsync("getIndexItemDetails", New Object() {IndexNo}, Me.getIndexItemDetailsOperationCompleted, userState)
        End Sub
        
        Private Sub OngetIndexItemDetailsOperationCompleted(ByVal arg As Object)
            If (Not (Me.getIndexItemDetailsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getIndexItemDetailsCompleted(Me, New getIndexItemDetailsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://yokogawa.com.bh/getIndexItemDetailsString", RequestNamespace:="http://yokogawa.com.bh/", ResponseNamespace:="http://yokogawa.com.bh/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getIndexItemDetailsString(ByVal IndexNo As String, ByVal Server As String) As String
            Dim results() As Object = Me.Invoke("getIndexItemDetailsString", New Object() {IndexNo, Server})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getIndexItemDetailsStringAsync(ByVal IndexNo As String, ByVal Server As String)
            Me.getIndexItemDetailsStringAsync(IndexNo, Server, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getIndexItemDetailsStringAsync(ByVal IndexNo As String, ByVal Server As String, ByVal userState As Object)
            If (Me.getIndexItemDetailsStringOperationCompleted Is Nothing) Then
                Me.getIndexItemDetailsStringOperationCompleted = AddressOf Me.OngetIndexItemDetailsStringOperationCompleted
            End If
            Me.InvokeAsync("getIndexItemDetailsString", New Object() {IndexNo, Server}, Me.getIndexItemDetailsStringOperationCompleted, userState)
        End Sub
        
        Private Sub OngetIndexItemDetailsStringOperationCompleted(ByVal arg As Object)
            If (Not (Me.getIndexItemDetailsStringCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getIndexItemDetailsStringCompleted(Me, New getIndexItemDetailsStringCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://yokogawa.com.bh/getIndexItemDetailsString_PlateMarkingOnly", RequestNamespace:="http://yokogawa.com.bh/", ResponseNamespace:="http://yokogawa.com.bh/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getIndexItemDetailsString_PlateMarkingOnly(ByVal IndexNo As String, ByVal Server As String) As String
            Dim results() As Object = Me.Invoke("getIndexItemDetailsString_PlateMarkingOnly", New Object() {IndexNo, Server})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getIndexItemDetailsString_PlateMarkingOnlyAsync(ByVal IndexNo As String, ByVal Server As String)
            Me.getIndexItemDetailsString_PlateMarkingOnlyAsync(IndexNo, Server, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getIndexItemDetailsString_PlateMarkingOnlyAsync(ByVal IndexNo As String, ByVal Server As String, ByVal userState As Object)
            If (Me.getIndexItemDetailsString_PlateMarkingOnlyOperationCompleted Is Nothing) Then
                Me.getIndexItemDetailsString_PlateMarkingOnlyOperationCompleted = AddressOf Me.OngetIndexItemDetailsString_PlateMarkingOnlyOperationCompleted
            End If
            Me.InvokeAsync("getIndexItemDetailsString_PlateMarkingOnly", New Object() {IndexNo, Server}, Me.getIndexItemDetailsString_PlateMarkingOnlyOperationCompleted, userState)
        End Sub
        
        Private Sub OngetIndexItemDetailsString_PlateMarkingOnlyOperationCompleted(ByVal arg As Object)
            If (Not (Me.getIndexItemDetailsString_PlateMarkingOnlyCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getIndexItemDetailsString_PlateMarkingOnlyCompleted(Me, New getIndexItemDetailsString_PlateMarkingOnlyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://yokogawa.com.bh/getIndexItemDet", RequestNamespace:="http://yokogawa.com.bh/", ResponseNamespace:="http://yokogawa.com.bh/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getIndexItemDet(ByVal IndexNo As String) As System.Data.DataTable
            Dim results() As Object = Me.Invoke("getIndexItemDet", New Object() {IndexNo})
            Return CType(results(0),System.Data.DataTable)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getIndexItemDetAsync(ByVal IndexNo As String)
            Me.getIndexItemDetAsync(IndexNo, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getIndexItemDetAsync(ByVal IndexNo As String, ByVal userState As Object)
            If (Me.getIndexItemDetOperationCompleted Is Nothing) Then
                Me.getIndexItemDetOperationCompleted = AddressOf Me.OngetIndexItemDetOperationCompleted
            End If
            Me.InvokeAsync("getIndexItemDet", New Object() {IndexNo}, Me.getIndexItemDetOperationCompleted, userState)
        End Sub
        
        Private Sub OngetIndexItemDetOperationCompleted(ByVal arg As Object)
            If (Not (Me.getIndexItemDetCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getIndexItemDetCompleted(Me, New getIndexItemDetCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://yokogawa.com.bh/CYBERPS_SP", RequestNamespace:="http://yokogawa.com.bh/", ResponseNamespace:="http://yokogawa.com.bh/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CYBERPS_SP(ByVal MsCode As String, ByVal TF As Decimal) As Decimal
            Dim results() As Object = Me.Invoke("CYBERPS_SP", New Object() {MsCode, TF})
            Return CType(results(0),Decimal)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CYBERPS_SPAsync(ByVal MsCode As String, ByVal TF As Decimal)
            Me.CYBERPS_SPAsync(MsCode, TF, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CYBERPS_SPAsync(ByVal MsCode As String, ByVal TF As Decimal, ByVal userState As Object)
            If (Me.CYBERPS_SPOperationCompleted Is Nothing) Then
                Me.CYBERPS_SPOperationCompleted = AddressOf Me.OnCYBERPS_SPOperationCompleted
            End If
            Me.InvokeAsync("CYBERPS_SP", New Object() {MsCode, TF}, Me.CYBERPS_SPOperationCompleted, userState)
        End Sub
        
        Private Sub OnCYBERPS_SPOperationCompleted(ByVal arg As Object)
            If (Not (Me.CYBERPS_SPCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CYBERPS_SPCompleted(Me, New CYBERPS_SPCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://yokogawa.com.bh/getPlatePartNumbers", RequestNamespace:="http://yokogawa.com.bh/", ResponseNamespace:="http://yokogawa.com.bh/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getPlatePartNumbers(ByVal MsCode As String) As String
            Dim results() As Object = Me.Invoke("getPlatePartNumbers", New Object() {MsCode})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getPlatePartNumbersAsync(ByVal MsCode As String)
            Me.getPlatePartNumbersAsync(MsCode, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getPlatePartNumbersAsync(ByVal MsCode As String, ByVal userState As Object)
            If (Me.getPlatePartNumbersOperationCompleted Is Nothing) Then
                Me.getPlatePartNumbersOperationCompleted = AddressOf Me.OngetPlatePartNumbersOperationCompleted
            End If
            Me.InvokeAsync("getPlatePartNumbers", New Object() {MsCode}, Me.getPlatePartNumbersOperationCompleted, userState)
        End Sub
        
        Private Sub OngetPlatePartNumbersOperationCompleted(ByVal arg As Object)
            If (Not (Me.getPlatePartNumbersCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getPlatePartNumbersCompleted(Me, New getPlatePartNumbersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://yokogawa.com.bh/ReadDBasString", RequestNamespace:="http://yokogawa.com.bh/", ResponseNamespace:="http://yokogawa.com.bh/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ReadDBasString(ByVal table As String, ByVal fieldName As String, ByVal fieldValue As String) As String
            Dim results() As Object = Me.Invoke("ReadDBasString", New Object() {table, fieldName, fieldValue})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ReadDBasStringAsync(ByVal table As String, ByVal fieldName As String, ByVal fieldValue As String)
            Me.ReadDBasStringAsync(table, fieldName, fieldValue, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ReadDBasStringAsync(ByVal table As String, ByVal fieldName As String, ByVal fieldValue As String, ByVal userState As Object)
            If (Me.ReadDBasStringOperationCompleted Is Nothing) Then
                Me.ReadDBasStringOperationCompleted = AddressOf Me.OnReadDBasStringOperationCompleted
            End If
            Me.InvokeAsync("ReadDBasString", New Object() {table, fieldName, fieldValue}, Me.ReadDBasStringOperationCompleted, userState)
        End Sub
        
        Private Sub OnReadDBasStringOperationCompleted(ByVal arg As Object)
            If (Not (Me.ReadDBasStringCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ReadDBasStringCompleted(Me, New ReadDBasStringCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://yokogawa.com.bh/ExecureSqlQry", RequestNamespace:="http://yokogawa.com.bh/", ResponseNamespace:="http://yokogawa.com.bh/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ExecureSqlQry(ByVal SqlQry As String, ByVal DataBase As String) As String
            Dim results() As Object = Me.Invoke("ExecureSqlQry", New Object() {SqlQry, DataBase})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ExecureSqlQryAsync(ByVal SqlQry As String, ByVal DataBase As String)
            Me.ExecureSqlQryAsync(SqlQry, DataBase, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ExecureSqlQryAsync(ByVal SqlQry As String, ByVal DataBase As String, ByVal userState As Object)
            If (Me.ExecureSqlQryOperationCompleted Is Nothing) Then
                Me.ExecureSqlQryOperationCompleted = AddressOf Me.OnExecureSqlQryOperationCompleted
            End If
            Me.InvokeAsync("ExecureSqlQry", New Object() {SqlQry, DataBase}, Me.ExecureSqlQryOperationCompleted, userState)
        End Sub
        
        Private Sub OnExecureSqlQryOperationCompleted(ByVal arg As Object)
            If (Not (Me.ExecureSqlQryCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ExecureSqlQryCompleted(Me, New ExecureSqlQryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://yokogawa.com.bh/UpdateYGSPSoLine", RequestNamespace:="http://yokogawa.com.bh/", ResponseNamespace:="http://yokogawa.com.bh/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateYGSPSoLine(ByVal SoNo As String, ByVal LineNo As String, ByVal OnlyItemNos As String) As String
            Dim results() As Object = Me.Invoke("UpdateYGSPSoLine", New Object() {SoNo, LineNo, OnlyItemNos})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateYGSPSoLineAsync(ByVal SoNo As String, ByVal LineNo As String, ByVal OnlyItemNos As String)
            Me.UpdateYGSPSoLineAsync(SoNo, LineNo, OnlyItemNos, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateYGSPSoLineAsync(ByVal SoNo As String, ByVal LineNo As String, ByVal OnlyItemNos As String, ByVal userState As Object)
            If (Me.UpdateYGSPSoLineOperationCompleted Is Nothing) Then
                Me.UpdateYGSPSoLineOperationCompleted = AddressOf Me.OnUpdateYGSPSoLineOperationCompleted
            End If
            Me.InvokeAsync("UpdateYGSPSoLine", New Object() {SoNo, LineNo, OnlyItemNos}, Me.UpdateYGSPSoLineOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateYGSPSoLineOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateYGSPSoLineCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateYGSPSoLineCompleted(Me, New UpdateYGSPSoLineCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://yokogawa.com.bh/ReadYGSPSoLine", RequestNamespace:="http://yokogawa.com.bh/", ResponseNamespace:="http://yokogawa.com.bh/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ReadYGSPSoLine(ByVal SoLinkage As String, ByRef ErrMsg As String) As System.Data.DataTable
            Dim results() As Object = Me.Invoke("ReadYGSPSoLine", New Object() {SoLinkage, ErrMsg})
            ErrMsg = CType(results(1),String)
            Return CType(results(0),System.Data.DataTable)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ReadYGSPSoLineAsync(ByVal SoLinkage As String, ByVal ErrMsg As String)
            Me.ReadYGSPSoLineAsync(SoLinkage, ErrMsg, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ReadYGSPSoLineAsync(ByVal SoLinkage As String, ByVal ErrMsg As String, ByVal userState As Object)
            If (Me.ReadYGSPSoLineOperationCompleted Is Nothing) Then
                Me.ReadYGSPSoLineOperationCompleted = AddressOf Me.OnReadYGSPSoLineOperationCompleted
            End If
            Me.InvokeAsync("ReadYGSPSoLine", New Object() {SoLinkage, ErrMsg}, Me.ReadYGSPSoLineOperationCompleted, userState)
        End Sub
        
        Private Sub OnReadYGSPSoLineOperationCompleted(ByVal arg As Object)
            If (Not (Me.ReadYGSPSoLineCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ReadYGSPSoLineCompleted(Me, New ReadYGSPSoLineCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://yokogawa.com.bh/UploadFile_ScanDeliveryNote", RequestNamespace:="http://yokogawa.com.bh/", ResponseNamespace:="http://yokogawa.com.bh/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UploadFile_ScanDeliveryNote(<System.Xml.Serialization.XmlElementAttribute(DataType:="base64Binary")> ByVal FileData() As Byte, ByVal FileName As String, ByVal SubDir As String) As String
            Dim results() As Object = Me.Invoke("UploadFile_ScanDeliveryNote", New Object() {FileData, FileName, SubDir})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UploadFile_ScanDeliveryNoteAsync(ByVal FileData() As Byte, ByVal FileName As String, ByVal SubDir As String)
            Me.UploadFile_ScanDeliveryNoteAsync(FileData, FileName, SubDir, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UploadFile_ScanDeliveryNoteAsync(ByVal FileData() As Byte, ByVal FileName As String, ByVal SubDir As String, ByVal userState As Object)
            If (Me.UploadFile_ScanDeliveryNoteOperationCompleted Is Nothing) Then
                Me.UploadFile_ScanDeliveryNoteOperationCompleted = AddressOf Me.OnUploadFile_ScanDeliveryNoteOperationCompleted
            End If
            Me.InvokeAsync("UploadFile_ScanDeliveryNote", New Object() {FileData, FileName, SubDir}, Me.UploadFile_ScanDeliveryNoteOperationCompleted, userState)
        End Sub
        
        Private Sub OnUploadFile_ScanDeliveryNoteOperationCompleted(ByVal arg As Object)
            If (Not (Me.UploadFile_ScanDeliveryNoteCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UploadFile_ScanDeliveryNoteCompleted(Me, New UploadFile_ScanDeliveryNoteCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://yokogawa.com.bh/UploadFile_FinalQCC", RequestNamespace:="http://yokogawa.com.bh/", ResponseNamespace:="http://yokogawa.com.bh/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UploadFile_FinalQCC(<System.Xml.Serialization.XmlElementAttribute(DataType:="base64Binary")> ByVal FileData() As Byte, ByVal DateValue As String) As String
            Dim results() As Object = Me.Invoke("UploadFile_FinalQCC", New Object() {FileData, DateValue})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UploadFile_FinalQCCAsync(ByVal FileData() As Byte, ByVal DateValue As String)
            Me.UploadFile_FinalQCCAsync(FileData, DateValue, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UploadFile_FinalQCCAsync(ByVal FileData() As Byte, ByVal DateValue As String, ByVal userState As Object)
            If (Me.UploadFile_FinalQCCOperationCompleted Is Nothing) Then
                Me.UploadFile_FinalQCCOperationCompleted = AddressOf Me.OnUploadFile_FinalQCCOperationCompleted
            End If
            Me.InvokeAsync("UploadFile_FinalQCC", New Object() {FileData, DateValue}, Me.UploadFile_FinalQCCOperationCompleted, userState)
        End Sub
        
        Private Sub OnUploadFile_FinalQCCOperationCompleted(ByVal arg As Object)
            If (Not (Me.UploadFile_FinalQCCCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UploadFile_FinalQCCCompleted(Me, New UploadFile_FinalQCCCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://yokogawa.com.bh/getCrmDatatable", RequestNamespace:="http://yokogawa.com.bh/", ResponseNamespace:="http://yokogawa.com.bh/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getCrmDatatable(ByVal CrmNo As String, ByRef errMsg As String) As System.Data.DataTable
            Dim results() As Object = Me.Invoke("getCrmDatatable", New Object() {CrmNo, errMsg})
            errMsg = CType(results(1),String)
            Return CType(results(0),System.Data.DataTable)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getCrmDatatableAsync(ByVal CrmNo As String, ByVal errMsg As String)
            Me.getCrmDatatableAsync(CrmNo, errMsg, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getCrmDatatableAsync(ByVal CrmNo As String, ByVal errMsg As String, ByVal userState As Object)
            If (Me.getCrmDatatableOperationCompleted Is Nothing) Then
                Me.getCrmDatatableOperationCompleted = AddressOf Me.OngetCrmDatatableOperationCompleted
            End If
            Me.InvokeAsync("getCrmDatatable", New Object() {CrmNo, errMsg}, Me.getCrmDatatableOperationCompleted, userState)
        End Sub
        
        Private Sub OngetCrmDatatableOperationCompleted(ByVal arg As Object)
            If (Not (Me.getCrmDatatableCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getCrmDatatableCompleted(Me, New getCrmDatatableCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://yokogawa.com.bh/ConvertExcelToPDF", RequestNamespace:="http://yokogawa.com.bh/", ResponseNamespace:="http://yokogawa.com.bh/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ConvertExcelToPDF(ByVal ExcelFileFullPath As String, ByVal SaveAsFileFullPath As String, ByVal SheetNo As Integer, ByRef errMsg As String) As Boolean
            Dim results() As Object = Me.Invoke("ConvertExcelToPDF", New Object() {ExcelFileFullPath, SaveAsFileFullPath, SheetNo, errMsg})
            errMsg = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ConvertExcelToPDFAsync(ByVal ExcelFileFullPath As String, ByVal SaveAsFileFullPath As String, ByVal SheetNo As Integer, ByVal errMsg As String)
            Me.ConvertExcelToPDFAsync(ExcelFileFullPath, SaveAsFileFullPath, SheetNo, errMsg, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ConvertExcelToPDFAsync(ByVal ExcelFileFullPath As String, ByVal SaveAsFileFullPath As String, ByVal SheetNo As Integer, ByVal errMsg As String, ByVal userState As Object)
            If (Me.ConvertExcelToPDFOperationCompleted Is Nothing) Then
                Me.ConvertExcelToPDFOperationCompleted = AddressOf Me.OnConvertExcelToPDFOperationCompleted
            End If
            Me.InvokeAsync("ConvertExcelToPDF", New Object() {ExcelFileFullPath, SaveAsFileFullPath, SheetNo, errMsg}, Me.ConvertExcelToPDFOperationCompleted, userState)
        End Sub
        
        Private Sub OnConvertExcelToPDFOperationCompleted(ByVal arg As Object)
            If (Not (Me.ConvertExcelToPDFCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ConvertExcelToPDFCompleted(Me, New ConvertExcelToPDFCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        Public Shadows Sub CancelAsync(ByVal userState As Object)
            MyBase.CancelAsync(userState)
        End Sub
        
        Private Function IsLocalFileSystemWebService(ByVal url As String) As Boolean
            If ((url Is Nothing)  _
                        OrElse (url Is String.Empty)) Then
                Return false
            End If
            Dim wsUri As System.Uri = New System.Uri(url)
            If ((wsUri.Port >= 1024)  _
                        AndAlso (String.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) = 0)) Then
                Return true
            End If
            Return false
        End Function
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")>  _
    Public Delegate Sub getIndexModelCodeCompletedEventHandler(ByVal sender As Object, ByVal e As getIndexModelCodeCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getIndexModelCodeCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")>  _
    Public Delegate Sub getModelCompletedEventHandler(ByVal sender As Object, ByVal e As getModelCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getModelCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")>  _
    Public Delegate Sub getProductDescriptionCompletedEventHandler(ByVal sender As Object, ByVal e As getProductDescriptionCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getProductDescriptionCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")>  _
    Public Delegate Sub getProductStyleCompletedEventHandler(ByVal sender As Object, ByVal e As getProductStyleCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getProductStyleCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")>  _
    Public Delegate Sub getIndexItemDetailsCompletedEventHandler(ByVal sender As Object, ByVal e As getIndexItemDetailsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getIndexItemDetailsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")>  _
    Public Delegate Sub getIndexItemDetailsStringCompletedEventHandler(ByVal sender As Object, ByVal e As getIndexItemDetailsStringCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getIndexItemDetailsStringCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")>  _
    Public Delegate Sub getIndexItemDetailsString_PlateMarkingOnlyCompletedEventHandler(ByVal sender As Object, ByVal e As getIndexItemDetailsString_PlateMarkingOnlyCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getIndexItemDetailsString_PlateMarkingOnlyCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")>  _
    Public Delegate Sub getIndexItemDetCompletedEventHandler(ByVal sender As Object, ByVal e As getIndexItemDetCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getIndexItemDetCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataTable
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataTable)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")>  _
    Public Delegate Sub CYBERPS_SPCompletedEventHandler(ByVal sender As Object, ByVal e As CYBERPS_SPCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CYBERPS_SPCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Decimal
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Decimal)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")>  _
    Public Delegate Sub getPlatePartNumbersCompletedEventHandler(ByVal sender As Object, ByVal e As getPlatePartNumbersCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getPlatePartNumbersCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")>  _
    Public Delegate Sub ReadDBasStringCompletedEventHandler(ByVal sender As Object, ByVal e As ReadDBasStringCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ReadDBasStringCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")>  _
    Public Delegate Sub ExecureSqlQryCompletedEventHandler(ByVal sender As Object, ByVal e As ExecureSqlQryCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ExecureSqlQryCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")>  _
    Public Delegate Sub UpdateYGSPSoLineCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateYGSPSoLineCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateYGSPSoLineCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")>  _
    Public Delegate Sub ReadYGSPSoLineCompletedEventHandler(ByVal sender As Object, ByVal e As ReadYGSPSoLineCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ReadYGSPSoLineCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataTable
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataTable)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property ErrMsg() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")>  _
    Public Delegate Sub UploadFile_ScanDeliveryNoteCompletedEventHandler(ByVal sender As Object, ByVal e As UploadFile_ScanDeliveryNoteCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UploadFile_ScanDeliveryNoteCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")>  _
    Public Delegate Sub UploadFile_FinalQCCCompletedEventHandler(ByVal sender As Object, ByVal e As UploadFile_FinalQCCCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UploadFile_FinalQCCCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")>  _
    Public Delegate Sub getCrmDatatableCompletedEventHandler(ByVal sender As Object, ByVal e As getCrmDatatableCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getCrmDatatableCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataTable
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataTable)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property errMsg() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")>  _
    Public Delegate Sub ConvertExcelToPDFCompletedEventHandler(ByVal sender As Object, ByVal e As ConvertExcelToPDFCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ConvertExcelToPDFCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property errMsg() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
End Namespace
